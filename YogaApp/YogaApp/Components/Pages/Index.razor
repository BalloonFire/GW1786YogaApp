@page "/"
@inject YogaCourseService CourseService
@inject YogaScheduleService ScheduleService
@inject TeacherService TeacherService
@using Microsoft.AspNetCore.Components

<div class="container">
    <h2>Find Your Yoga Class</h2>
    
    <div class="search-container">
        <div class="search-filters">
            <div class="filter-group">
                <label for="day-select">Day of Week</label>
                <select id="day-select" @bind="selectedDay">
                    <option value="">Any Day</option>
                    <option value="Monday">Monday</option>
                    <option value="Tuesday">Tuesday</option>
                    <option value="Wednesday">Wednesday</option>
                    <option value="Thursday">Thursday</option>
                    <option value="Friday">Friday</option>
                    <option value="Saturday">Saturday</option>
                    <option value="Sunday">Sunday</option>
                </select>
            </div>
            
            <div class="filter-group">
                <label for="time-input">Time</label>
                <input id="time-input" type="time"
                   value="@selectedTime"
                   @oninput="e => selectedTime = ((ChangeEventArgs)e).Value?.ToString()" />
            </div>
            
            <div class="filter-group">
                <label for="type-select">Type</label>
                <select id="type-select" @bind="selectedType">
                    <option value="">Any Type</option>
                    <option value="Flow Yoga">Flow Yoga</option>
                    <option value="Aerial Yoga">Aerial Yoga</option>
                    <option value="Family Yoga">Family Yoga</option>
                </select>
            </div>
            
            <button class="btn btn-primary" @onclick="SearchClasses">Search</button>
        </div>
    </div>
    
    @if (isLoading)
    {
        <div class="loading">
            <p>Loading classes...</p>
        </div>
    }
    else if (showScheduleView)
    {
        <div class="schedule-view">
            <h3>Weekly Schedule</h3>
            <button class="btn" @onclick="ToggleView">Show Class List</button>
            
            @if (groupedSchedules != null)
            {
                @foreach (var day in groupedSchedules)
                {
                    <div class="day-group">
                        <h4>@day.Key.ToString("dddd, MMMM d")</h4>
                        
                        @foreach (var schedule in day)
                        {
                            <div class="schedule-card">
                                <div class="schedule-time">
                                    @schedule.Date.ToString("h:mm tt")
                                </div>
                                <div class="schedule-details">
                                    <h5>@schedule.Course?.Type</h5>
                                    <p>With @schedule.Teacher?.Name</p>
                                    <p class="course-meta">@schedule.Course?.Duration minutes • $@schedule.Course?.Price</p>
                                    @if (!string.IsNullOrEmpty(schedule.Comments))
                                    {
                                        <p class="comments">@schedule.Comments</p>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
            }
        </div>
    }
    else
    {
        <div>
            <h3>Available Classes</h3>
            <button class="btn" @onclick="ToggleView">Show Schedule View</button>
            
            @if (courses?.Any() ?? false)
            {
                <div class="course-list">
                    @foreach (var course in courses)
                    {
                        <div class="course-card">
                            <h3>@course.Type</h3>
                            <p class="course-meta">@course.DayOfWeek, @course.StartTime - @course.EndTime</p>
                            <p class="course-meta">@course.StartDate.ToString("MMM d") - @course.EndDate.ToString("MMM d, yyyy")</p>
                            <p>@course.Description</p>
                            <p class="course-meta">Duration: @course.Duration min • $@course.Price</p>
                            <p class="course-meta">Capacity: @course.Capacity spots</p>
                        </div>
                    }
                </div>
            }
            else
            {
                <p>No classes found matching your criteria.</p>
            }
        </div>
    }
</div>

@code {
    private List<YogaCourse> courses;
    private List<IGrouping<DateTime, YogaSchedule>> groupedSchedules;
    private bool isLoading;
    private bool showScheduleView;
    private string selectedDay;
    private string selectedTime;
    private string selectedType;

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
    }

    private async Task LoadInitialData()
    {
        isLoading = true;
        courses = await CourseService.GetAllCourses();
        
        // Load schedule data for the next 7 days
        var startDate = DateTime.Today;
        var endDate = startDate.AddDays(7);
        var schedules = await ScheduleService.GetSchedulesByDateRange(startDate, endDate);
        
        // Load related data
        var teacherIds = schedules.Select(s => s.TeacherId).Distinct();
        var teachers = await Task.WhenAll(
            teacherIds.Select(id => TeacherService.GetTeacherById(id)));
        
        var courseIds = schedules.Select(s => s.CourseId).Distinct();
        var courseDetails = await Task.WhenAll(
            courseIds.Select(id => CourseService.GetCourseById(id)));
        
        foreach (var schedule in schedules)
        {
            schedule.Teacher = teachers.FirstOrDefault(t => t?.Id == schedule.TeacherId);
            schedule.Course = courseDetails.FirstOrDefault(c => c?.Id == schedule.CourseId);
        }
        
        groupedSchedules = schedules
            .GroupBy(s => s.Date.Date)
            .OrderBy(g => g.Key)
            .ToList();
        
        isLoading = false;
    }

    private async Task SearchClasses()
    {
        isLoading = true;
        courses = await CourseService.SearchCourses(selectedDay, selectedTime, selectedType);
        isLoading = false;
    }

    private void ToggleView()
    {
        showScheduleView = !showScheduleView;
    }
}